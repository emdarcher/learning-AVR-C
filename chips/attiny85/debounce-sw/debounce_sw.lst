
debounce_sw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000b88  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000829  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	41 c0       	rjmp	.+130    	; 0xb0 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
DDRB |= 1 << PINB4; //led
  30:	bc 9a       	sbi	0x17, 4	; 23
PORTB ^= 1 << PINB4; //toggle
  32:	88 b3       	in	r24, 0x18	; 24
  34:	90 e1       	ldi	r25, 0x10	; 16
  36:	89 27       	eor	r24, r25
  38:	88 bb       	out	0x18, r24	; 24
DDRB |= 1 << PINB2; //led2
  3a:	ba 9a       	sbi	0x17, 2	; 23
DDRB &= ~(1 << PINB3); //input from button
  3c:	bb 98       	cbi	0x17, 3	; 23
PORTB |= 1 << PINB3;
  3e:	c3 9a       	sbi	0x18, 3	; 24

int Pressed = 0;
int Pressed_Confidence_Level = 0; //button press confidence
int Released_Confidence_Level = 0; //vice versa
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0
DDRB |= 1 << PINB2; //led2
DDRB &= ~(1 << PINB3); //input from button
PORTB |= 1 << PINB3;

int Pressed = 0;
int Pressed_Confidence_Level = 0; //button press confidence
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
PORTB ^= 1 << PINB4; //toggle
DDRB |= 1 << PINB2; //led2
DDRB &= ~(1 << PINB3); //input from button
PORTB |= 1 << PINB3;

int Pressed = 0;
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	50 e0       	ldi	r21, 0x00	; 0
			Released_Confidence_Level = 0; //reset released confidence
			if (Pressed_Confidence_Level > 500) //inicator of valid press
			{
				if (Pressed == 0)
				{
					PORTB ^= 1 << PINB4; //toggling
  4c:	70 e1       	ldi	r23, 0x10	; 16
					PORTB ^= 1 << PINB2;
  4e:	64 e0       	ldi	r22, 0x04	; 4
int Pressed_Confidence_Level = 0; //button press confidence
int Released_Confidence_Level = 0; //vice versa

	while (1)
	{
		if (bit_is_clear(PINB, 3))
  50:	b3 99       	sbic	0x16, 3	; 22
  52:	16 c0       	rjmp	.+44     	; 0x80 <__SREG__+0x41>
		{
			Pressed_Confidence_Level ++; //inc pressed confidence
  54:	01 96       	adiw	r24, 0x01	; 1
			Released_Confidence_Level = 0; //reset released confidence
			if (Pressed_Confidence_Level > 500) //inicator of valid press
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	85 3f       	cpi	r24, 0xF5	; 245
  5a:	92 07       	cpc	r25, r18
  5c:	d4 f0       	brlt	.+52     	; 0x92 <__SREG__+0x53>
			{
				if (Pressed == 0)
  5e:	41 15       	cp	r20, r1
  60:	51 05       	cpc	r21, r1
  62:	09 f5       	brne	.+66     	; 0xa6 <__SREG__+0x67>
				{
					PORTB ^= 1 << PINB4; //toggling
  64:	88 b3       	in	r24, 0x18	; 24
  66:	87 27       	eor	r24, r23
  68:	88 bb       	out	0x18, r24	; 24
					PORTB ^= 1 << PINB2;
  6a:	88 b3       	in	r24, 0x18	; 24
  6c:	86 27       	eor	r24, r22
  6e:	88 bb       	out	0x18, r24	; 24
	while (1)
	{
		if (bit_is_clear(PINB, 3))
		{
			Pressed_Confidence_Level ++; //inc pressed confidence
			Released_Confidence_Level = 0; //reset released confidence
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
					PORTB ^= 1 << PINB4; //toggling
					PORTB ^= 1 << PINB2;
					Pressed = 1;
				}
				//Zero it so a new condition can be evaluated
				Pressed_Confidence_Level = 0;
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
			{
				if (Pressed == 0)
				{
					PORTB ^= 1 << PINB4; //toggling
					PORTB ^= 1 << PINB2;
					Pressed = 1;
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	50 e0       	ldi	r21, 0x00	; 0
int Pressed_Confidence_Level = 0; //button press confidence
int Released_Confidence_Level = 0; //vice versa

	while (1)
	{
		if (bit_is_clear(PINB, 3))
  7c:	b3 9b       	sbis	0x16, 3	; 22
  7e:	ea cf       	rjmp	.-44     	; 0x54 <__SREG__+0x15>
				Pressed_Confidence_Level = 0;
			}
		}
		else
		{
			Released_Confidence_Level ++; //works like pressed
  80:	2f 5f       	subi	r18, 0xFF	; 255
  82:	3f 4f       	sbci	r19, 0xFF	; 255
			Pressed_Confidence_Level = 0; //Reset since released
			if (Released_Confidence_Level >500)
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	25 3f       	cpi	r18, 0xF5	; 245
  88:	38 07       	cpc	r19, r24
  8a:	34 f4       	brge	.+12     	; 0x98 <__SREG__+0x59>
			}
		}
		else
		{
			Released_Confidence_Level ++; //works like pressed
			Pressed_Confidence_Level = 0; //Reset since released
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	df cf       	rjmp	.-66     	; 0x50 <__SREG__+0x11>
	while (1)
	{
		if (bit_is_clear(PINB, 3))
		{
			Pressed_Confidence_Level ++; //inc pressed confidence
			Released_Confidence_Level = 0; //reset released confidence
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	dc cf       	rjmp	.-72     	; 0x50 <__SREG__+0x11>
			Released_Confidence_Level ++; //works like pressed
			Pressed_Confidence_Level = 0; //Reset since released
			if (Released_Confidence_Level >500)
			{
				Pressed = 0;
				Released_Confidence_Level = 0;
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
		else
		{
			Released_Confidence_Level ++; //works like pressed
			Pressed_Confidence_Level = 0; //Reset since released
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
			if (Released_Confidence_Level >500)
			{
				Pressed = 0;
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	d5 cf       	rjmp	.-86     	; 0x50 <__SREG__+0x11>
	while (1)
	{
		if (bit_is_clear(PINB, 3))
		{
			Pressed_Confidence_Level ++; //inc pressed confidence
			Released_Confidence_Level = 0; //reset released confidence
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
					PORTB ^= 1 << PINB4; //toggling
					PORTB ^= 1 << PINB2;
					Pressed = 1;
				}
				//Zero it so a new condition can be evaluated
				Pressed_Confidence_Level = 0;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	d0 cf       	rjmp	.-96     	; 0x50 <__SREG__+0x11>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
