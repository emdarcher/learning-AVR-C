
button_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a80  00000000  00000000  000000c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000814  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	1c c0       	rjmp	.+56     	; 0x66 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <util/delay.h>

int main(void)
{

DDRB |= (1 << PB4 ); //setup PB4 for output to led
  30:	bc 9a       	sbi	0x17, 4	; 23
DDRB &= ~(1 << PB3 ); //setup PB3 for button input
  32:	bb 98       	cbi	0x17, 3	; 23

PORTB |= (1 << PB3 ); //setup internall pullup resistor on PB3
  34:	c3 9a       	sbi	0x18, 3	; 24

    while (1)
    {
        PORTB ^= ( 1 << PB4 ); //toggle PB4 and led
  36:	90 e1       	ldi	r25, 0x10	; 16
  38:	88 b3       	in	r24, 0x18	; 24
  3a:	89 27       	eor	r24, r25
  3c:	88 bb       	out	0x18, r24	; 24

	//delay differences based on button input
	if ( bit_is_clear(PINB, 3))
  3e:	b3 9b       	sbis	0x16, 3	; 22
  40:	0b c0       	rjmp	.+22     	; 0x58 <__SREG__+0x19>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  42:	e7 ea       	ldi	r30, 0xA7	; 167
  44:	f1 e6       	ldi	r31, 0x61	; 97
  46:	31 97       	sbiw	r30, 0x01	; 1
  48:	f1 f7       	brne	.-4      	; 0x46 <__SREG__+0x7>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <__SREG__+0xd>
  4c:	00 00       	nop

PORTB |= (1 << PB3 ); //setup internall pullup resistor on PB3

    while (1)
    {
        PORTB ^= ( 1 << PB4 ); //toggle PB4 and led
  4e:	88 b3       	in	r24, 0x18	; 24
  50:	89 27       	eor	r24, r25
  52:	88 bb       	out	0x18, r24	; 24

	//delay differences based on button input
	if ( bit_is_clear(PINB, 3))
  54:	b3 99       	sbic	0x16, 3	; 22
  56:	f5 cf       	rjmp	.-22     	; 0x42 <__SREG__+0x3>
  58:	e3 ec       	ldi	r30, 0xC3	; 195
  5a:	f9 e0       	ldi	r31, 0x09	; 9
  5c:	31 97       	sbiw	r30, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <__SREG__+0x1d>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
  64:	e9 cf       	rjmp	.-46     	; 0x38 <__CCP__+0x4>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
