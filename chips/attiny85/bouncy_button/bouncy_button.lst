
bouncy_button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000a98  00000000  00000000  000000bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000007dd  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	1a c0       	rjmp	.+52     	; 0x62 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:

#include <avr/io.h>

int main(void)
{
	DDRB |= ( 1 << PINB4 ); //set PB4 output led
  30:	bc 9a       	sbi	0x17, 4	; 23
	PORTB ^= ( 1 << PINB4 ); //toggle PB4
  32:	88 b3       	in	r24, 0x18	; 24
  34:	90 e1       	ldi	r25, 0x10	; 16
  36:	89 27       	eor	r24, r25
  38:	88 bb       	out	0x18, r24	; 24
	DDRB |= ( 1 << PINB2 ); //set PB2 output led 2
  3a:	ba 9a       	sbi	0x17, 2	; 23
	DDRB &= ~( 1 << PINB3 ); //set PB3 input button, so 0 bit
  3c:	bb 98       	cbi	0x17, 3	; 23
	PORTB |= ( 1 << PINB3 ); //set high to use internal pullup resistor
  3e:	c3 9a       	sbi	0x18, 3	; 24

	uint8_t Pressed = 0; //initialize pressed value variable
  40:	80 e0       	ldi	r24, 0x00	; 0
	{
		if (bit_is_clear(PINB, 3))
		{
			if (Pressed == 0)
			{
				PORTB ^= ( 1 << PINB4 ); //toggle led 1
  42:	20 e1       	ldi	r18, 0x10	; 16
				PORTB ^= ( 1 << PINB2 ); //toggle led 2 
  44:	94 e0       	ldi	r25, 0x04	; 4
  46:	01 c0       	rjmp	.+2      	; 0x4a <__SREG__+0xb>
			}
		}
		else
		{
		//executes when not pressed
		Pressed = 0;
  48:	80 e0       	ldi	r24, 0x00	; 0

	uint8_t Pressed = 0; //initialize pressed value variable

	while (1)
	{
		if (bit_is_clear(PINB, 3))
  4a:	b3 99       	sbic	0x16, 3	; 22
  4c:	fd cf       	rjmp	.-6      	; 0x48 <__SREG__+0x9>
		{
			if (Pressed == 0)
  4e:	88 23       	and	r24, r24
  50:	e1 f7       	brne	.-8      	; 0x4a <__SREG__+0xb>
			{
				PORTB ^= ( 1 << PINB4 ); //toggle led 1
  52:	88 b3       	in	r24, 0x18	; 24
  54:	82 27       	eor	r24, r18
  56:	88 bb       	out	0x18, r24	; 24
				PORTB ^= ( 1 << PINB2 ); //toggle led 2 
  58:	88 b3       	in	r24, 0x18	; 24
  5a:	89 27       	eor	r24, r25
  5c:	88 bb       	out	0x18, r24	; 24
				Pressed = 1;
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	f4 cf       	rjmp	.-24     	; 0x4a <__SREG__+0xb>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
